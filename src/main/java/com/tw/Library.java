package com.tw;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.DoubleStream;
import java.util.stream.IntStream;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Library {
    public List<Student> students = new ArrayList<>();

    public static void main(String[] args) {
        Library scoreSheet = new Library();
        scoreSheet.menuInteraction();
    }

    public boolean addStudent(Student student) {
        if (isIn(student)) {return false;}
        return students.add(student);
    }

    public boolean isIn(Student student) {
        for (int i = 0; i < students.size(); i++) {
            if (student.getId() == students.get(i).getId()){ return true; }
        }
        return false;
    }

    public Student findStudentById(int id) {
        for (int i = 0; i < students.size(); i++) {
            if (id == students.get(i).getId()){return students.get(i);}
        }
        return null;
    }

    public List<Double> allMeanScore(List<String> subjectNames){
        List<Double> meanScoreForAllSubjects = new ArrayList<>();
        for (int i = 0; i < subjectNames.size(); i++) {
            String curSubject = subjectNames.get(i);
            int sum = students.stream().mapToInt(stu -> stu.getOneScore(curSubject)).sum();
            meanScoreForAllSubjects.add((double) (sum/students.size()));
        }
        return meanScoreForAllSubjects;
    }

    public List<Double> allMedianScore(List<String> subjectNames){
        List<Double> medianScoreForAllSubjects = new ArrayList<>();
        for (int i = 0; i < subjectNames.size(); i++){
            String curSubject = subjectNames.get(i);
            int[] array = students.stream().mapToInt(stu -> stu.getOneScore(curSubject)).sorted().toArray();
            double median;
            if (array.length % 2 == 0){ median = (array[array.length/2-1]+array[array.length/2])/2; }
            else{ median = array[array.length/2]; }
            medianScoreForAllSubjects.add(median);
        }
        return medianScoreForAllSubjects;
    }


    public double sumScoreMean(){
        return (students.stream().mapToInt(stu -> stu.getSumScore()).sum())/students.size();
    }

    public double sumScoreMedian(){
        int[] sortedArray = students.stream().mapToInt(stu -> stu.getSumScore()).sorted().toArray();
        double median;
        if (sortedArray.length % 2 == 0){ median = (sortedArray[sortedArray.length/2-1]+sortedArray[sortedArray.length/2])/2; }
        else{ median = sortedArray[sortedArray.length/2]; }
        return median;
    }

    public void printScoreSheet(ArrayList<Integer> ids) {
        System.out.print("成绩单\n");
        System.out.print("姓名|数学|语文|英语|编程|平均分|总分\n");
        System.out.print("========================\n");
        for (int i = 0; i < ids.size(); i++) {
            Student studentById = findStudentById(ids.get(i));
            if (studentById != null){
                System.out.print(studentById.scoresString()+"\n");
            }
        }
        System.out.print("========================\n");
        System.out.print("全班总分平均数："+sumScoreMean()+"\n");
        System.out.print("全班总分中位数："+sumScoreMedian());
    }

    public void menuInteraction(){
        String menu = "\n1. 添加学生\n" +
                "2. 生成成绩单\n" +
                "3. 退出\n"+"" +
                "请输入你的选择（1～3）：";

        while(true){
            System.out.println(menu);
            Scanner sc = new Scanner(System.in);
            String item = sc.nextLine();
            switch (item){
                case "1":
                    System.out.println("请输入学生信息（格式：姓名, 学号, 学科: 成绩, ...），按回车提交：");
                    while(true){
                        String studentInfo = sc.nextLine();
                        Student student = null;
                        try{
                            student = stringParse(studentInfo);
                            addStudent(student);
                            System.out.println("学生"+student.getName()+"的成绩被添加");
                            break;
                        }
                        catch (Exception e) {
                            e.printStackTrace();
                            System.out.println("请按正确的格式输入（格式：姓名, 学号, 学科: 成绩, ...）：");
                        }
                    }
                    break;
                case "2":
                    System.out.println("请输入要打印的学生的学号（格式： 学号, 学号,...），按回车提交：");
                    String idInfo = sc.nextLine();
                    ArrayList<Integer> ids = null;
                    try {
                        ids = idParse(idInfo);
                    } catch (Exception e) {
                        e.printStackTrace();
                        System.out.println("请按正确的格式输入要打印的学生的学号（格式： 学号, 学号,...），按回车提交：");
                    }
                    printScoreSheet(ids);
                    break;
                case "3":
                    return;
            }
        }
    }

    private ArrayList<Integer> idParse(String idInfo) throws Exception{
        ArrayList<Integer> ids = new ArrayList<>();
        String[] splitInfo = idInfo.split(", ");
        for (int i = 0; i < splitInfo.length; i++) {
            ids.add(Integer.valueOf(splitInfo[i]));
        }
        return ids;
    }

    public Student stringParse(String studentInfo) throws Exception{
        String[] splitInfo = studentInfo.split(", ");
        String name = splitInfo[0];
        int id = Integer.parseInt(splitInfo[1]);
        HashMap<String, Integer> scores = new HashMap<>();
        for (int i = 2; i < splitInfo.length; i++) {
            String[] scoreWithSubject = splitInfo[i].split(": ");
            scores.put(scoreWithSubject[0], Integer.valueOf(scoreWithSubject[1]));
        }
        if(scores.size() != 4){throw new Exception();}
        Student student = new Student(name,id,scores);
        return student;
    }
}
